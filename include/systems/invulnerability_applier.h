#pragma once
#include <memory>
#include <vector>

#include "../components/components.h"
#include "../game_state.h"
#include "../helper/ecs.h"
#include "../helper/vec2d.h"

class InvurelnabilityApplierSystem : public System
{
public:
    InvurelnabilityApplierSystem(std::vector<std::shared_ptr<Entity>>* entities)
      : m_entities(entities){};

    void Update(double dt) override
    {
        for (auto entity : *m_entities)
        {

            CollidedComponent* collided_component = entity->GetComponent<CollidedComponent>();
            SquareRenderComponent* square_render_component
              = entity->GetComponent<SquareRenderComponent>();

            if (collided_component == nullptr)
            {
                continue;
            }

            InvulnerabilityComponent* invulnerability_component
              = entity->GetComponent<InvulnerabilityComponent>();

            // Add invulnerability component if not existed
            if (invulnerability_component == nullptr)
            {
                continue;
            }

            // for each collision..
            //    check if no invulnerability -> create it + remove colission
            //    existing invulnerability -> if time not surpassed duration + remove colission
            //    existing invulnerability -> if time surpassed, remove invulnerability
            for (int ite(0); ite < collided_component->entities_collided_with.size(); ite++)
            {
                auto entitiy_collided_with = collided_component->entities_collided_with[ite];

                // check if invulnerability exist-> remove colission
                if (invulnerability_component->invulnerabilities_map.find(
                      entitiy_collided_with->id())
                    != invulnerability_component->invulnerabilities_map.end())
                {

                    // remove collision
                    collided_component->entities_collided_with.erase(
                      collided_component->entities_collided_with.begin() + ite);
                    ite--;
                }
            }
        }
    }

private:
    std::vector<std::shared_ptr<Entity>>* m_entities;
};
